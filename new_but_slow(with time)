from PIL import Image
import requests
from io import BytesIO
from webcolors import CSS3_HEX_TO_NAMES, hex_to_rgb
import time

def find_image():
	url = input()
	response = requests.get(url)
	img = Image.open(BytesIO(response.content))
	return img

def find_nearest(rgb):
	#найдем минимальное евклидово расстояние
	r,g,b = rgb
	min_euq_r = 10**6
	for key, name in CSS3_HEX_TO_NAMES.items():
		r_n,g_n,b_n = hex_to_rgb(key)
		r_euq = (r_n-r)**2
		g_euq = (g_n-g)**2
		b_euq = (b_n-b)**2
		if min_euq_r>b_euq+g_euq+r_euq:
			min_euq_r = b_euq+g_euq+r_euq
			nearest_color = name
	return nearest_color

def count_colors():
	start_time = time.time()
	img = find_image()
	width = img.size[0]
	height = img.size[1]
	pix = img.load()
	colors = {}
	print("Здесь начинается цикл - "+ str(time.time()-start_time))
	old_time = time.time()
	for x in range(0,width,10):
		for y in range(0,height,10):
			r = pix[x,y][0]
			g = pix[x,y][1]
			b = pix[x,y][2]
			rgb = (r,g,b)
			print("Здесь начинается функция поиска ближайших - "+ str(time.time()-start_time))
			start_time = time.time()
			name = find_nearest(rgb)
			print("Здесь заканчивается функция поиска ближайших - "+ str(time.time()-start_time))
			start_time = time.time()
			if name in colors:
				colors[name] += 1
			else:
				colors[name] = 1
	return (colors, width*height)
	print("Здесь заканчивается цикл - "+ str(time.time()-old_time))
	start_time = time.time()
colors,size = count_colors()
new_colors = {}
for key in colors:
	percent = colors[key]*10000 / size
	new_colors[key] = f"{percent:.{1}f}"
print(new_colors)
